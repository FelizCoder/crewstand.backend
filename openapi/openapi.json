{
  "openapi": "3.1.0",
  "info": {
    "title": "swn crew backend",
    "version": "1.0.0"
  },
  "paths": {
    "/v1/actuators/": {
      "get": {
        "tags": [
          "Actuators"
        ],
        "summary": "Get All Actuators",
        "description": "Retrieve a list of all actuators, including solenoid valves, proportional valves, and pumps.\n\nReturns:\n    List[Union[SolenoidValve, ProportionalValve, Pump]]: A list containing all the actuators.",
        "operationId": "get_all_actuators_v1_actuators__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/SolenoidValve"
                      },
                      {
                        "$ref": "#/components/schemas/ProportionalValve"
                      },
                      {
                        "$ref": "#/components/schemas/Pump"
                      }
                    ]
                  },
                  "type": "array",
                  "title": "Response Get All Actuators V1 Actuators  Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/actuators/solenoid/": {
      "get": {
        "tags": [
          "Solenoid Valves"
        ],
        "summary": "Get All",
        "description": "Retrieve all actuators of a specific type.\n\nReturns:\n    List[service.item_type]: A list of actuators of the specified type.",
        "operationId": "get_all_v1_actuators_solenoid__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SolenoidValve"
                  },
                  "type": "array",
                  "title": "Response Get All V1 Actuators Solenoid  Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/actuators/solenoid/{actuator_id}": {
      "get": {
        "tags": [
          "Solenoid Valves"
        ],
        "summary": "Get By Id",
        "description": "Retrieve a specific actuator by its ID.\n\nArgs:\n    actuator_id (int): The ID of the actuator to retrieve.\n\nReturns:\n    service.item_type: The actuator object with the specified ID.",
        "operationId": "get_by_id_v1_actuators_solenoid__actuator_id__get",
        "parameters": [
          {
            "name": "actuator_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMaximum": 4,
              "title": "Actuator Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SolenoidValve"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/actuators/solenoid/set": {
      "post": {
        "tags": [
          "Solenoid Valves"
        ],
        "summary": "Set State",
        "description": "Set the state of a specific actuator.\n\nArgs:\n    actuator (service.item_type): The actuator object with the state to be set.\n\nReturns:\n    service.item_type: The actuator object after its state has been updated.",
        "operationId": "set_state_v1_actuators_solenoid_set_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SolenoidValve"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SolenoidValve"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/actuators/proportional/": {
      "get": {
        "tags": [
          "Proportional Valves"
        ],
        "summary": "Get All",
        "description": "Retrieve all actuators of a specific type.\n\nReturns:\n    List[service.item_type]: A list of actuators of the specified type.",
        "operationId": "get_all_v1_actuators_proportional__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProportionalValve"
                  },
                  "type": "array",
                  "title": "Response Get All V1 Actuators Proportional  Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/actuators/proportional/{actuator_id}": {
      "get": {
        "tags": [
          "Proportional Valves"
        ],
        "summary": "Get By Id",
        "description": "Retrieve a specific actuator by its ID.\n\nArgs:\n    actuator_id (int): The ID of the actuator to retrieve.\n\nReturns:\n    service.item_type: The actuator object with the specified ID.",
        "operationId": "get_by_id_v1_actuators_proportional__actuator_id__get",
        "parameters": [
          {
            "name": "actuator_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMaximum": 2,
              "title": "Actuator Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProportionalValve"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/actuators/proportional/set": {
      "post": {
        "tags": [
          "Proportional Valves"
        ],
        "summary": "Set State",
        "description": "Set the state of a specific actuator.\n\nArgs:\n    actuator (service.item_type): The actuator object with the state to be set.\n\nReturns:\n    service.item_type: The actuator object after its state has been updated.",
        "operationId": "set_state_v1_actuators_proportional_set_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProportionalValve"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProportionalValve"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/actuators/pump/": {
      "get": {
        "tags": [
          "Pumps"
        ],
        "summary": "Get All",
        "description": "Retrieve all actuators of a specific type.\n\nReturns:\n    List[service.item_type]: A list of actuators of the specified type.",
        "operationId": "get_all_v1_actuators_pump__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pump"
                  },
                  "type": "array",
                  "title": "Response Get All V1 Actuators Pump  Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/actuators/pump/{actuator_id}": {
      "get": {
        "tags": [
          "Pumps"
        ],
        "summary": "Get By Id",
        "description": "Retrieve a specific actuator by its ID.\n\nArgs:\n    actuator_id (int): The ID of the actuator to retrieve.\n\nReturns:\n    service.item_type: The actuator object with the specified ID.",
        "operationId": "get_by_id_v1_actuators_pump__actuator_id__get",
        "parameters": [
          {
            "name": "actuator_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMaximum": 2,
              "title": "Actuator Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pump"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/actuators/pump/set": {
      "post": {
        "tags": [
          "Pumps"
        ],
        "summary": "Set State",
        "description": "Set the state of a specific actuator.\n\nArgs:\n    actuator (service.item_type): The actuator object with the state to be set.\n\nReturns:\n    service.item_type: The actuator object after its state has been updated.",
        "operationId": "set_state_v1_actuators_pump_set_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pump"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pump"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sensors/": {
      "get": {
        "tags": [
          "Sensors"
        ],
        "summary": "Get All Sensors",
        "description": "Retrieve a list of all sensors, including flowmeters.\n\nReturns:\n    List[Union[Flowmeter]]: A list containing all the sensors.",
        "operationId": "get_all_sensors_v1_sensors__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Flowmeter"
                  },
                  "type": "array",
                  "title": "Response Get All Sensors V1 Sensors  Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sensors/flowmeters/": {
      "get": {
        "tags": [
          "Flowmeters"
        ],
        "summary": "Get All",
        "description": "Retrieve all sensors of a specific type.\n\nReturns:\n    List[self.service.item_type]: A list of sensors of the specified type.",
        "operationId": "get_all_v1_sensors_flowmeters__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Flowmeter"
                  },
                  "type": "array",
                  "title": "Response Get All V1 Sensors Flowmeters  Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sensors/flowmeters/{sensor_id}": {
      "get": {
        "tags": [
          "Flowmeters"
        ],
        "summary": "Get By Id",
        "description": "Retrieve a specific sensor by its ID.\n\nArgs:\n    sensor_id (int): The ID of the sensor to retrieve.\n\nReturns:\n    self.service.item_type: The sensor object with the specified ID.",
        "operationId": "get_by_id_v1_sensors_flowmeters__sensor_id__get",
        "parameters": [
          {
            "name": "sensor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMaximum": 2,
              "title": "Sensor Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flowmeter"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sensors/flowmeters/{sensor_id}/reading": {
      "post": {
        "tags": [
          "Flowmeters"
        ],
        "summary": "Post Reading",
        "description": "Post a new reading for a specific sensor.\n\nArgs:\n    sensor_id (int): The ID of the sensor.\n    reading (SensorReading): The new reading to update.\n\nReturns:\n    self.service.item_type: The updated sensor object.",
        "operationId": "post_reading_v1_sensors_flowmeters__sensor_id__reading_post",
        "parameters": [
          {
            "name": "sensor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMaximum": 2,
              "title": "Sensor Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SensorReading"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flowmeter"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Root",
        "description": "Returns a simple greeting message.\n\nReturns:\n    dict: A dictionary containing a single key-value pair with the message.",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Flowmeter": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "flowmeter"
            ],
            "const": "flowmeter",
            "title": "Type",
            "default": "flowmeter"
          },
          "id": {
            "type": "integer",
            "minimum": 0,
            "title": "Id",
            "examples": [
              0,
              1,
              2
            ]
          },
          "current_reading": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SensorReading"
              },
              {
                "type": "null"
              }
            ]
          },
          "unit": {
            "type": "string",
            "title": "Unit",
            "default": "l/min"
          }
        },
        "type": "object",
        "required": [
          "id"
        ],
        "title": "Flowmeter",
        "description": "Model for a flowmeter sensor."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "ProportionalValve": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "proportional valve"
            ],
            "const": "proportional valve",
            "title": "Type",
            "default": "proportional valve"
          },
          "id": {
            "type": "integer",
            "minimum": -1,
            "title": "Id",
            "examples": [
              0,
              1,
              2
            ]
          },
          "state": {
            "type": "number",
            "maximum": 100,
            "minimum": 0,
            "title": "State"
          }
        },
        "type": "object",
        "required": [
          "id",
          "state"
        ],
        "title": "ProportionalValve",
        "description": "Model representing a proportional valve actuator."
      },
      "Pump": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pump"
            ],
            "const": "pump",
            "title": "Type",
            "default": "pump"
          },
          "id": {
            "type": "integer",
            "minimum": -1,
            "title": "Id",
            "examples": [
              0,
              1,
              2
            ]
          },
          "state": {
            "type": "boolean",
            "title": "State"
          }
        },
        "type": "object",
        "required": [
          "id",
          "state"
        ],
        "title": "Pump",
        "description": "Model representing a pump actuator."
      },
      "SensorReading": {
        "properties": {
          "value": {
            "type": "number",
            "title": "Value"
          },
          "timestamp_ns": {
            "type": "integer",
            "title": "Timestamp Ns",
            "description": "Timestamp of the reading in nanoseconds since Epoch",
            "examples": [
              1730906908814683100
            ]
          }
        },
        "type": "object",
        "required": [
          "value",
          "timestamp_ns"
        ],
        "title": "SensorReading",
        "description": "Base model for a sensor reading."
      },
      "SolenoidValve": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "solenoid valve"
            ],
            "const": "solenoid valve",
            "title": "Type",
            "default": "solenoid valve"
          },
          "id": {
            "type": "integer",
            "minimum": -1,
            "title": "Id",
            "examples": [
              0,
              1,
              2
            ]
          },
          "state": {
            "type": "boolean",
            "title": "State"
          }
        },
        "type": "object",
        "required": [
          "id",
          "state"
        ],
        "title": "SolenoidValve",
        "description": "Model representing a solenoid valve actuator."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  }
}