{
  "openapi": "3.1.0",
  "info": {
    "title": "swn crew backend",
    "version": "1.3.1"
  },
  "paths": {
    "/v1/actuators/": {
      "get": {
        "tags": [
          "Actuators"
        ],
        "summary": "Get All Actuators",
        "description": "Retrieve a list of all actuators, including solenoid valves, proportional valves, and pumps.\n\nReturns:\n    List[Union[SolenoidValve, ProportionalValve, Pump]]: A list containing all the actuators.",
        "operationId": "get_all_actuators_v1_actuators__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/SolenoidValve"
                      },
                      {
                        "$ref": "#/components/schemas/ProportionalValve"
                      },
                      {
                        "$ref": "#/components/schemas/Pump"
                      }
                    ]
                  },
                  "type": "array",
                  "title": "Response Get All Actuators V1 Actuators  Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/actuators/solenoid/": {
      "get": {
        "tags": [
          "Solenoid Valves"
        ],
        "summary": "Get All",
        "description": "Retrieve all actuators of a specific type.\n\nReturns:\n    List[service.item_type]: A list of actuators of the specified type.",
        "operationId": "get_all_v1_actuators_solenoid__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SolenoidValve"
                  },
                  "type": "array",
                  "title": "Response Get All V1 Actuators Solenoid  Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/actuators/solenoid/{actuator_id}": {
      "get": {
        "tags": [
          "Solenoid Valves"
        ],
        "summary": "Get By Id",
        "description": "Retrieve a specific actuator by its ID.\n\nArgs:\n    actuator_id (int): The ID of the actuator to retrieve.\n\nReturns:\n    service.item_type: The actuator object with the specified ID.",
        "operationId": "get_by_id_v1_actuators_solenoid__actuator_id__get",
        "parameters": [
          {
            "name": "actuator_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMaximum": 4,
              "title": "Actuator Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SolenoidValve"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/actuators/solenoid/set": {
      "post": {
        "tags": [
          "Solenoid Valves"
        ],
        "summary": "Set State",
        "description": "Set the state of a specific actuator.\n\nArgs:\n    actuator (service.item_type): The actuator object with the state to be set.\n\nReturns:\n    service.item_type: The actuator object after its state has been updated.",
        "operationId": "set_state_v1_actuators_solenoid_set_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SolenoidValve"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SolenoidValve"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/actuators/proportional/": {
      "get": {
        "tags": [
          "Proportional Valves"
        ],
        "summary": "Get All",
        "description": "Retrieve all actuators of a specific type.\n\nReturns:\n    List[service.item_type]: A list of actuators of the specified type.",
        "operationId": "get_all_v1_actuators_proportional__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProportionalValve"
                  },
                  "type": "array",
                  "title": "Response Get All V1 Actuators Proportional  Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/actuators/proportional/{actuator_id}": {
      "get": {
        "tags": [
          "Proportional Valves"
        ],
        "summary": "Get By Id",
        "description": "Retrieve a specific actuator by its ID.\n\nArgs:\n    actuator_id (int): The ID of the actuator to retrieve.\n\nReturns:\n    service.item_type: The actuator object with the specified ID.",
        "operationId": "get_by_id_v1_actuators_proportional__actuator_id__get",
        "parameters": [
          {
            "name": "actuator_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMaximum": 2,
              "title": "Actuator Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProportionalValve"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/actuators/proportional/set": {
      "post": {
        "tags": [
          "Proportional Valves"
        ],
        "summary": "Set State",
        "description": "Set the state of a specific actuator.\n\nArgs:\n    actuator (service.item_type): The actuator object with the state to be set.\n\nReturns:\n    service.item_type: The actuator object after its state has been updated.",
        "operationId": "set_state_v1_actuators_proportional_set_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProportionalValve"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProportionalValve"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/actuators/pump/": {
      "get": {
        "tags": [
          "Pumps"
        ],
        "summary": "Get All",
        "description": "Retrieve all actuators of a specific type.\n\nReturns:\n    List[service.item_type]: A list of actuators of the specified type.",
        "operationId": "get_all_v1_actuators_pump__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pump"
                  },
                  "type": "array",
                  "title": "Response Get All V1 Actuators Pump  Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/actuators/pump/{actuator_id}": {
      "get": {
        "tags": [
          "Pumps"
        ],
        "summary": "Get By Id",
        "description": "Retrieve a specific actuator by its ID.\n\nArgs:\n    actuator_id (int): The ID of the actuator to retrieve.\n\nReturns:\n    service.item_type: The actuator object with the specified ID.",
        "operationId": "get_by_id_v1_actuators_pump__actuator_id__get",
        "parameters": [
          {
            "name": "actuator_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMaximum": 2,
              "title": "Actuator Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pump"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/actuators/pump/set": {
      "post": {
        "tags": [
          "Pumps"
        ],
        "summary": "Set State",
        "description": "Set the state of a specific actuator.\n\nArgs:\n    actuator (service.item_type): The actuator object with the state to be set.\n\nReturns:\n    service.item_type: The actuator object after its state has been updated.",
        "operationId": "set_state_v1_actuators_pump_set_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pump"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pump"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sensors/": {
      "get": {
        "tags": [
          "Sensors"
        ],
        "summary": "Get All Sensors",
        "description": "Retrieve a list of all sensors, including flowmeters.\n\nReturns:\n    List[Union[Flowmeter]]: A list containing all the sensors.",
        "operationId": "get_all_sensors_v1_sensors__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Flowmeter"
                  },
                  "type": "array",
                  "title": "Response Get All Sensors V1 Sensors  Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sensors/flowmeters/": {
      "get": {
        "tags": [
          "Flowmeters"
        ],
        "summary": "Get All",
        "description": "Retrieve all sensors of a specific type.\n\nReturns:\n    List[self.service.item_type]: A list of sensors of the specified type.",
        "operationId": "get_all_v1_sensors_flowmeters__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Sensor"
                  },
                  "type": "array",
                  "title": "Response Get All V1 Sensors Flowmeters  Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sensors/flowmeters/{sensor_id}": {
      "get": {
        "tags": [
          "Flowmeters"
        ],
        "summary": "Get By Id",
        "description": "Retrieve a specific sensor by its ID.\n\nArgs:\n    sensor_id (int): The ID of the sensor to retrieve.\n\nReturns:\n    self.service.item_type: The sensor object with the specified ID.",
        "operationId": "get_by_id_v1_sensors_flowmeters__sensor_id__get",
        "parameters": [
          {
            "name": "sensor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMaximum": 2,
              "title": "Sensor Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sensor"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sensors/flowmeters/{sensor_id}/reading": {
      "post": {
        "tags": [
          "Flowmeters"
        ],
        "summary": "Post Reading",
        "description": "Post a new reading for a specific sensor.\n\nArgs:\n    sensor_id (int): The ID of the sensor.\n    reading (SensorReading): The new reading to update.\n\nReturns:\n    self.service.item_type: The updated sensor object.",
        "operationId": "post_reading_v1_sensors_flowmeters__sensor_id__reading_post",
        "parameters": [
          {
            "name": "sensor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMaximum": 2,
              "title": "Sensor Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SensorReading"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sensor"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sensors/flowmeters/{sensor_id}/setpoint": {
      "post": {
        "tags": [
          "Flowmeters"
        ],
        "summary": "Post Setpoint",
        "operationId": "post_setpoint_v1_sensors_flowmeters__sensor_id__setpoint_post",
        "parameters": [
          {
            "name": "sensor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMaximum": 2,
              "title": "Sensor Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Setpoint"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sensor"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/info/version": {
      "get": {
        "tags": [
          "Backend Info"
        ],
        "summary": "Get Version",
        "description": "**Summary**\n\nRetrieves the current version information of the application.\n\n**Parameters**\n\nNone\n\n**Returns**\n\nstr\n    The version information of the application, as defined in `settings.VERSION`.\n\n**Notes**\n\nThis endpoint provides a simple way to determine the version of the API.\nThe version information is sourced from the application's settings.\n\n**Examples**\n\n>>> response = get_version()\n>>> print(response)\n# Output: <current_version_string> (e.g., \"1.2.3\")",
        "operationId": "get_version_v1_info_version_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Get Version V1 Info Version Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/missions/flow/queue": {
      "post": {
        "tags": [
          "Flow Missions"
        ],
        "summary": "Add To Queue",
        "description": "Add a new mission to the queue.",
        "operationId": "add_to_queue_v1_missions_flow_queue_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FlowControlMission"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowControlMission"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/missions/flow/current": {
      "get": {
        "tags": [
          "Flow Missions"
        ],
        "summary": "Get Current",
        "description": "Get the currently executing mission.",
        "operationId": "get_current_v1_missions_flow_current_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/FlowControlMission"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "title": "Response Get Current V1 Missions Flow Current Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/missions/flow/next": {
      "get": {
        "tags": [
          "Flow Missions"
        ],
        "summary": "Get Next",
        "description": "Get the next mission in the queue.",
        "operationId": "get_next_v1_missions_flow_next_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/FlowControlMission"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "title": "Response Get Next V1 Missions Flow Next Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/missions/flow/queue/length": {
      "get": {
        "tags": [
          "Flow Missions"
        ],
        "summary": "Get Queue Length",
        "description": "Get the current length of the mission queue.",
        "operationId": "get_queue_length_v1_missions_flow_queue_length_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "title": "Response Get Queue Length V1 Missions Flow Queue Length Get"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Root",
        "description": "Returns a simple greeting message.\n\nReturns:\n    dict: A dictionary containing a single key-value pair with the message.",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "FlowControlMission": {
        "properties": {
          "valve_id": {
            "type": "integer",
            "minimum": -1,
            "title": "Valve Id",
            "description": "ID of the valve to steer",
            "examples": [
              1,
              2,
              3
            ]
          },
          "flow_trajectory": {
            "items": {
              "$ref": "#/components/schemas/TrajectoryPoint"
            },
            "type": "array",
            "title": "Flow Trajectory",
            "description": "Definition of the Flow Trajectory. A list of TrajectoryPoint instances, where each point defines the flow rate until a specific time",
            "examples": [
              [
                [
                  10,
                  22.2
                ],
                [
                  20,
                  11.1
                ]
              ]
            ]
          }
        },
        "type": "object",
        "required": [
          "valve_id",
          "flow_trajectory"
        ],
        "title": "FlowControlMission",
        "description": "A class representing a flow control mission for a specific valve.\n\nThis class defines a mission that controls the flow rate of a specified valve over time\nby following a predefined trajectory of time and flow rate points.\n\nParameters\n----------\nvalve_id : int\n    The ID of the valve to control.\nflow_trajectory : list of TrajectoryPoint\n    A list of TrajectoryPoint instances, each specifying a time and the desired flow rate\n    until that time is reached.\n\nRaises\n------\nValueError\n    If the flow trajectory is empty, contains negative time or flow rate values,\n    or if the time values are not in strictly ascending order.\n\nExamples\n--------\n>>> from app.models.missions import FlowControlMission, TrajectoryPoint\n>>> mission = FlowControlMission(\n...     valve_id=1,\n...     flow_trajectory=[\n...         TrajectoryPoint(time=10, flow_rate=22.2),\n...         TrajectoryPoint(time=20, flow_rate=11.1)\n...     ]\n... )\n>>> print(mission.valve_id)\n1"
      },
      "Flowmeter": {
        "properties": {
          "setpoint": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Setpoint"
          },
          "type": {
            "type": "string",
            "enum": [
              "flowmeter"
            ],
            "const": "flowmeter",
            "title": "Type",
            "default": "flowmeter"
          },
          "unit": {
            "type": "string",
            "title": "Unit",
            "default": "l/min"
          },
          "id": {
            "type": "integer",
            "minimum": 0,
            "title": "Id",
            "examples": [
              0,
              1,
              2
            ]
          },
          "current_reading": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SensorReading"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "id"
        ],
        "title": "Flowmeter",
        "description": "Model for a flowmeter sensor."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "ProportionalValve": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "proportional valve"
            ],
            "const": "proportional valve",
            "title": "Type",
            "default": "proportional valve"
          },
          "id": {
            "type": "integer",
            "minimum": -1,
            "title": "Id",
            "examples": [
              0,
              1,
              2
            ]
          },
          "state": {
            "type": "number",
            "maximum": 100,
            "minimum": 0,
            "title": "State"
          },
          "current_position": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Position"
          }
        },
        "type": "object",
        "required": [
          "id",
          "state"
        ],
        "title": "ProportionalValve",
        "description": "Model representing a proportional valve actuator."
      },
      "Pump": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pump"
            ],
            "const": "pump",
            "title": "Type",
            "default": "pump"
          },
          "id": {
            "type": "integer",
            "minimum": -1,
            "title": "Id",
            "examples": [
              0,
              1,
              2
            ]
          },
          "state": {
            "type": "boolean",
            "title": "State"
          }
        },
        "type": "object",
        "required": [
          "id",
          "state"
        ],
        "title": "Pump",
        "description": "Model representing a pump actuator."
      },
      "Sensor": {
        "properties": {
          "setpoint": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Setpoint"
          },
          "type": {
            "$ref": "#/components/schemas/SensorEnum"
          },
          "unit": {
            "type": "string",
            "title": "Unit",
            "examples": [
              "l/min",
              "°C",
              "bar",
              "V"
            ]
          },
          "id": {
            "type": "integer",
            "minimum": 0,
            "title": "Id",
            "examples": [
              0,
              1,
              2
            ]
          },
          "current_reading": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SensorReading"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type",
          "unit",
          "id"
        ],
        "title": "Sensor",
        "description": "Base model for an sensor."
      },
      "SensorEnum": {
        "type": "string",
        "enum": [
          "flowmeter"
        ],
        "const": "flowmeter",
        "title": "SensorEnum",
        "description": "Enumeration for different types of sensors."
      },
      "SensorReading": {
        "properties": {
          "value": {
            "type": "number",
            "title": "Value"
          },
          "timestamp_ns": {
            "type": "integer",
            "title": "Timestamp Ns",
            "description": "Timestamp of the reading in nanoseconds since Epoch",
            "examples": [
              1740491541298927400
            ]
          }
        },
        "type": "object",
        "required": [
          "value",
          "timestamp_ns"
        ],
        "title": "SensorReading",
        "description": "Base model for a sensor reading."
      },
      "Setpoint": {
        "properties": {
          "setpoint": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Setpoint"
          }
        },
        "type": "object",
        "title": "Setpoint"
      },
      "SolenoidValve": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "solenoid valve"
            ],
            "const": "solenoid valve",
            "title": "Type",
            "default": "solenoid valve"
          },
          "id": {
            "type": "integer",
            "minimum": -1,
            "title": "Id",
            "examples": [
              0,
              1,
              2
            ]
          },
          "state": {
            "type": "boolean",
            "title": "State"
          }
        },
        "type": "object",
        "required": [
          "id",
          "state"
        ],
        "title": "SolenoidValve",
        "description": "Model representing a solenoid valve actuator."
      },
      "TrajectoryPoint": {
        "prefixItems": [
          {
            "type": "number",
            "title": "Time"
          },
          {
            "type": "number",
            "title": "Flow Rate"
          }
        ],
        "type": "array",
        "maxItems": 2,
        "minItems": 2
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  }
}